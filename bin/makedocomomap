#!/usr/bin/perl -w
use strict;
use utf8;
use FindBin;
use LWP::Simple;
use Data::Dumper;
use HTTP::MobileAgent;
use Encode;
use File::Spec;

my $URL =
'http://www.nttdocomo.co.jp/service/imode/make/content/spec/screen_area/index.html';

do_task(@ARGV);

sub do_task {
    my $html = decode( 'cp932', get($URL) );
    $html =~ s/(?:\r?\n)+/\n/g;
    $html =~ s/&mu;/myu/g;
    my $re = regexp();
    my %map;
    while ( $html =~ /$re/igs ) {
        my ( $model, $width, $height, $color, $depth ) = ( $1, $2, $3, $4, $5 );
        $map{ uc($model) } = {
            width  => $width,
            height => $height,
            color  => $color eq 'カラー',
            depth  => $depth,
        };
    }
    my $overwrite = $ARGV[0] && $ARGV[0] eq '-o';
    output_code( \%map, $overwrite );
}

sub output_code {
    my ( $map, $overwrite ) = @_;
    my $fh;
    if ($overwrite) {
        open $fh, '>', File::Spec->catfile($FindBin::Bin, qw/ .. lib HTTP MobileAgent DoCoMoDisplayMap.pm/)
          or die $!;
        select $fh;
    }
    $Data::Dumper::Indent = 1;
    $Data::Dumper::Terse  = 1;
    printf <<'TEMPLATE', Data::Dumper->Dump( [$map] );
package HTTP::MobileAgent::DoCoMoDisplayMap;
# This file is autogenerated by makedocomomap
# in HTTP-MobileAgent distribution

use strict;
require Exporter;
use base qw(Exporter);

use vars qw(@EXPORT_OK $DisplayMap);
@EXPORT_OK = qw($DisplayMap);

BEGIN {
    if ($ENV{DOCOMO_MAP}) {
        eval q{
            require XML::Simple;
            my $xml = XML::Simple->new;
            my $map = $xml->XMLin($ENV{DOCOMO_MAP});
            if ($map->{terminal}) {
                # new layout
                for my $terminal (@{$map->{terminal}}) {
                    my $model = delete $terminal->{model};
                    $DisplayMap->{$model} = $terminal;
                }
            }
            else {
                # old layout
                $DisplayMap = $map;
            }
        };
        warn "using normal hash map: $@" if $@;
    }
}

$DisplayMap ||= %s;

1;
TEMPLATE
    if ($overwrite) {
        close $fh;
    }
}

sub regexp {
    return <<'RE';
<td><span class="txt">([A-Z]+\d+\w*\+?).*?</span></td>
<td><span class="txt">.*?(?:</span></td>)?
<td><span class="txt">.*?(?:</span></td>)?
<td><span class="txt">.*?(\d+)×(\d+).*?</span></td>
<td>.*?</td>
<td><span class="txt">(白黒|カラー)(?:.*?)(\d+)(?:色|階調)</span></td>
RE
}
